
import numpy as np
import torch
import torch.nn as nn
import torchvision

from torch.nn import TransformerEncoder, TransformerEncoderLayer

class PositionalEncoding(nn.Module):

    def __init__(self, d_model, dropout=0.1, max_len=2_000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0.0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0.0, d_model, 2) * (-math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

class TorchTransformer(nn.Module):

    def __init__(self, ntoken, ninp, nhead, nhid, nlayers, num_classes, dropout=0.1):
        super(PyTorchBERT, self).__init__()
        self.model_type = 'Transformer'
        self.pos_encoder = PositionalEncoding(ninp, dropout)
        encoder_layers = TransformerEncoderLayer(ninp, nhead, nhid, dropout)
        self.transformer_encoder = TransformerEncoder(encoder_layers, nlayers)
        self.encoder = nn.Embedding(ntoken, ninp)
        self.ninp = ninp
        self.final_layer = nn.Linear(ninp, NUM_CLASSES)
        self.sigmoid = nn.Sigmoid()
        self.criterion = nn.BCELoss()

        self.init_weights()

    def gen_mask(self, sz):
        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)
        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))
        return mask

    def init_weights(self):
        initrange = 0.5
        self.encoder.weight.data.uniform_(-initrange, initrange)
        self.final_layer.bias.data.zero_()
        self.final_layer.weight.data.uniform_(-initrange, initrange)

    def forward(self, src, target, src_mask, inp_length):
        src = self.encoder(src) * math.sqrt(self.ninp)
        src = self.pos_encoder(src)
        output = self.transformer_encoder(src, src_mask)

        output = output.max(1)[0]
        loss = self.determine_loss(output, target.float())

        return self.sigmoid(self.final_layer(output)).squeeze(1), loss

    def determine_loss(self, y_pred, y_true):
        return self.criterion(y_pred, y_true)
